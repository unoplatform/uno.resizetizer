<?xml version="1.0" encoding="UTF-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<ItemGroup>
		<AvailableItemName Include="UnoAsset" Exclude="@(AvailableItemName)" />
		<AvailableItemName Include="UnoImage" Exclude="@(AvailableItemName)"/>
		<AvailableItemName Include="UnoIcon" Exclude="@(AvailableItemName)"/>
		<AvailableItemName Include="UnoSplashScreen" Exclude="@(AvailableItemName)"/>
	</ItemGroup>

	<PropertyGroup>
		<_UnoResizetizerTaskAssemblyName>$(MSBuildThisFileDirectory)netstandard2.0\Uno.Resizetizer_v0.dll</_UnoResizetizerTaskAssemblyName>
	</PropertyGroup>

	<UsingTask
			AssemblyFile="$(_UnoResizetizerTaskAssemblyName)"
			TaskName="Uno.Resizetizer.ResizetizeImages_v0"/>

	<UsingTask
			AssemblyFile="$(_UnoResizetizerTaskAssemblyName)"
			TaskName="Uno.Resizetizer.DetectInvalidResourceOutputFilenamesTask_v0"/>

	<UsingTask
			AssemblyFile="$(_UnoResizetizerTaskAssemblyName)"
			TaskName="Uno.Resizetizer.CreatePartialInfoPlistTask_v0"/>

	<UsingTask
			AssemblyFile="$(_UnoResizetizerTaskAssemblyName)"
			TaskName="Uno.Resizetizer.GenerateSplashAndroidResources_v0"/>

	<UsingTask
			AssemblyFile="$(_UnoResizetizerTaskAssemblyName)"
			TaskName="Uno.Resizetizer.GenerateSplashStoryboard_v0"/>

	<UsingTask
			AssemblyFile="$(_UnoResizetizerTaskAssemblyName)"
			TaskName="Uno.Resizetizer.GenerateSplashAssets_v0"/>

	<UsingTask
			AssemblyFile="$(_UnoResizetizerTaskAssemblyName)"
			TaskName="Uno.Resizetizer.GetUnoAssetPath_v0"/>

	<UsingTask
			AssemblyFile="$(_UnoResizetizerTaskAssemblyName)"
			TaskName="Uno.Resizetizer.GeneratePackageAppxManifest_v0"/>

	<UsingTask
			AssemblyFile="$(_UnoResizetizerTaskAssemblyName)"
			TaskName="Uno.Resizetizer.GenerateWasmSplashAssets_v0"/>

	<UsingTask
			AssemblyFile="$(_UnoResizetizerTaskAssemblyName)"
			TaskName="Uno.Resizetizer.CleanupAssetsTask_v0"/>

	<UsingTask
			AssemblyFile="$(_UnoResizetizerTaskAssemblyName)"
			TaskName="Uno.Resizetizer.RemoveSvgFromContentTask_v0"/>

	<PropertyGroup>
		<CleanDependsOn>
			$(CleanDependsOn);
			_CleanUnoResizetizer;
		</CleanDependsOn>

		<_UnoResizetizerInputsFile>$(IntermediateOutputPath)UnoImage.inputs</_UnoResizetizerInputsFile>
		<_UnoResizetizerStampFile>$(IntermediateOutputPath)UnoImage.stamp</_UnoResizetizerStampFile>
		<_UnoSplashInputsFile>$(IntermediateOutputPath)Unosplash.inputs</_UnoSplashInputsFile>
		<_UnoSplashStampFile>$(IntermediateOutputPath)Unosplash.stamp</_UnoSplashStampFile>
		<_UnoManifestStampFile>$(IntermediateOutputPath)Unomanifest.stamp</_UnoManifestStampFile>


		<_UnoResizetizerIntermediateOutputRoot>$(IntermediateOutputPath)unoresizetizer\</_UnoResizetizerIntermediateOutputRoot>
		<_UnoIntermediateImages>$(_UnoResizetizerIntermediateOutputRoot)r\</_UnoIntermediateImages>
		<_UnoIntermediateAppIcon>$(_UnoResizetizerIntermediateOutputRoot)AppIcons\</_UnoIntermediateAppIcon>
		<_UnoIntermediateSplashScreen>$(_UnoResizetizerIntermediateOutputRoot)sp\</_UnoIntermediateSplashScreen>
		<_UnoIntermediateManifest>$(_UnoResizetizerIntermediateOutputRoot)m\</_UnoIntermediateManifest>
		<_UnoIntermediateStoryboard>$(_UnoIntermediateSplashScreen)UnoSplash.storyboard</_UnoIntermediateStoryboard>
		<_UnoIntermediateAppManifestWasm>$(_UnoIntermediateSplashScreen)UnoAppManifest.js</_UnoIntermediateAppManifestWasm>

		<_UnoResizetizerPlatformIdentifier>$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)'))</_UnoResizetizerPlatformIdentifier>
		<_UnoResizetizerNoTargetPlatform Condition="'$(_UnoResizetizerPlatformIdentifier)' == ''">True</_UnoResizetizerNoTargetPlatform>
		<_UnoResizetizerPlatformIsAndroid Condition="'$(_UnoResizetizerPlatformIdentifier)' == 'android'">True</_UnoResizetizerPlatformIsAndroid>
		<_UnoResizetizerPlatformIsiOS Condition="'$(_UnoResizetizerPlatformIdentifier)' == 'ios'">True</_UnoResizetizerPlatformIsiOS>
		<_UnoResizetizerPlatformIsMacCatalyst Condition="'$(_UnoResizetizerPlatformIdentifier)' == 'maccatalyst'">True</_UnoResizetizerPlatformIsMacCatalyst>
		<_UnoResizetizerPlatformIsmacOS Condition="'$(_UnoResizetizerPlatformIdentifier)' == 'macos'">True</_UnoResizetizerPlatformIsmacOS>
		<_UnoResizetizerPlatformIstvOS Condition="'$(_UnoResizetizerPlatformIdentifier)' == 'tvos'">True</_UnoResizetizerPlatformIstvOS>
		<_UnoResizetizerPlatformIsWindows Condition="$(_UnoResizetizerPlatformIdentifier.Contains('windows')) == 'True'">True</_UnoResizetizerPlatformIsWindows>

		<UnoResizetizerIncludeSelfProject Condition="'$(UnoResizetizerIncludeSelfProject)' == ''">False</UnoResizetizerIncludeSelfProject>

		<_UnoResizetizerDefaultInvalidFilenamesErrorMessage>One or more invalid file names were detected. File names must be lowercase, start and end with a letter character, and contain only alphanumeric characters or underscores:</_UnoResizetizerDefaultInvalidFilenamesErrorMessage>

		<_WasmHasPWAManifest>False</_WasmHasPWAManifest>
		<_WasmHasPWAManifest Condition="'$(WasmPWAManifestFile)' != ''">True</_WasmHasPWAManifest>
		<_WasmPwaManifestPath Condition="'$(_WasmHasPWAManifest)' == 'True'">$(MSBuildProjectDirectory)\$(WasmPWAManifestFile)</_WasmPwaManifestPath>
	</PropertyGroup>

	<PropertyGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp'">
		<_UnoResizetizerIsNetCore>True</_UnoResizetizerIsNetCore>
		<_UnoResizetizerIsSkiaApp Condition="'$(UnoRuntimeIdentifier)' == 'Skia' Or $([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'desktop'">True</_UnoResizetizerIsSkiaApp>
		<_UnoResizetizerIsAndroidApp Condition=" '$(_UnoResizetizerPlatformIsAndroid)' == 'True' And '$(AndroidApplication)' == 'True'">True</_UnoResizetizerIsAndroidApp>
		<_UnoResizetizerIsiOSApp Condition="( '$(_UnoResizetizerPlatformIsiOS)' == 'True' OR '$(_UnoResizetizerPlatformIsMacCatalyst)' == 'True' ) And ('$(OutputType)' == 'Exe' Or '$(IsAppExtension)' == 'True')">True</_UnoResizetizerIsiOSApp>
		<_UnoResizetizerIsWindowsAppSdk Condition="('$(ProjectReunionWinUI)'=='True' Or '$(WindowsAppSDKWinUI)'=='true' or '$(UseWinUITools)'=='true') And '$(_UnoResizetizerPlatformIsWindows)' == 'True' And ('$(OutputType)' == 'WinExe' Or '$(OutputType)' == 'Exe')">True</_UnoResizetizerIsWindowsAppSdk>
		<_UnoResizetizerIsWasmApp Condition="'$(UnoRuntimeIdentifier)' == 'WebAssembly' Or $([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'browserwasm'">True</_UnoResizetizerIsWasmApp>
	</PropertyGroup>

	<Import Project="Uno.Resizetizer.android.targets" Condition="'$(_UnoResizetizerIsAndroidApp)' == 'True'"/>
	<Import Project="Uno.Resizetizer.wasm.targets" Condition="'$(_UnoResizetizerIsWasmApp)' == 'True'"/>
	<Import Project="Uno.Resizetizer.apple.targets" Condition="'$(_UnoResizetizerIsiOSApp)' == 'True' Or '$(_UnoResizetizerPlatformIsMacCatalyst)' == 'True'"/>
	<Import Project="Uno.Resizetizer.windows.skia.targets" Condition="'$(_UnoResizetizerIsWindowsAppSdk)' == 'True' Or '$(_UnoResizetizerIsSkiaApp)' == 'True'"/>


	<PropertyGroup Condition="'$(_UnoResizetizerIsAndroidApp)' == 'True' Or '$(_UnoResizetizerIsiOSApp)' == 'True' Or '$(_UnoResizetizerIsSkiaApp)' == 'True' Or '$(_UnoResizetizerIsWindowsAppSdk)' == 'True' Or '$(_UnoResizetizerIsWasmApp)' == 'True'">
		<_UnoResizetizerIsCompatibleApp>True</_UnoResizetizerIsCompatibleApp>

		<UnoResizetizeDependsOnTargets>
			$(UnoResizetizeDependsOnTargets);
			UnoResizetizeCollectItems;
			ProcessUnoSplashScreens;
		</UnoResizetizeDependsOnTargets>
	</PropertyGroup>

	<PropertyGroup Condition="$(_UnoResizetizerNoTargetPlatform) == 'True' Or '$(_UnoResizetizerIsCompatibleApp)' != 'True'">
		<UnoResizetizerIncludeSelfProject>true</UnoResizetizerIncludeSelfProject>
		<UnoResizetizerPlatformType>netstandard</UnoResizetizerPlatformType>

		<UnoResizetizeBeforeTargets>
			$(UnoResizetizeBeforeTargets);
			AssignTargetPaths;
		</UnoResizetizeBeforeTargets>

		<UnoResizetizeAfterTargets>
			UnoResizetizeCollectItems;
			$(UnoResizetizeAfterTargets);
			UnoAssetsGeneration;
			BuildDist;
		</UnoResizetizeAfterTargets>
	</PropertyGroup>

	<!-- Skia -->
	<PropertyGroup Condition="'$(_UnoResizetizerIsSkiaApp)' == 'True'">
		<UnoResizetizerIncludeSelfProject>false</UnoResizetizerIncludeSelfProject>

		<UnoResizetizeBeforeTargets>
			UnoAssetsGeneration;
			$(UnoResizetizeBeforeTargets);
			AssignTargetPaths;
		</UnoResizetizeBeforeTargets>

		<UnoGeneratePackageAppxManifestDependsOnTargets>
			$(UnoGeneratePackageAppxManifestDependsOnTargets);
			UnoResizetizeCollectItems;
		</UnoGeneratePackageAppxManifestDependsOnTargets>

		<UnoGeneratePackageAppxManifestBeforeTargets>
			$(UnoGeneratePackageAppxManifestDependsOnTargets);
			SplitResourcesByCulture;
			AssignTargetPaths;
		</UnoGeneratePackageAppxManifestBeforeTargets>
	</PropertyGroup>

	<!-- Wasm -->
	<PropertyGroup Condition="'$(_UnoResizetizerIsWasmApp)' == 'True'">
		<UnoResizetizerPlatformType>wasm</UnoResizetizerPlatformType>
		<UnoResizetizerIncludeSelfProject>false</UnoResizetizerIncludeSelfProject>

		<UnoResizetizeBeforeTargets>
			$(UnoResizetizeBeforeTargets);
			AssignTargetPaths;

		</UnoResizetizeBeforeTargets>

		<UnoResizetizeAfterTargets>
			UnoResizetizeCollectItems;
			$(UnoResizetizeAfterTargets);
			UnoAssetsGeneration;
			BuildDist;
		</UnoResizetizeAfterTargets>
	</PropertyGroup>

	<!-- iOS -->
	<PropertyGroup Condition="'$(_UnoResizetizerIsiOSApp)' == 'True'">
		<UnoResizetizerPlatformType>ios</UnoResizetizerPlatformType>

		<!-- We don't want to resizetize anything for an inner build when building a universal app, it's enough to only do it in the outer build -->
		<DisableUnoResizetizer Condition="'$(_IsMultiRidBuild)' == 'true'">true</DisableUnoResizetizer>

		<UnoResizetizeBeforeTargets>
			UnoAssetsGeneration;
			_CollectBundleResources;
			_BeforeCoreCompileImageAssets;
		</UnoResizetizeBeforeTargets>

		<CollectBundleResourcesDependsOn>
			$(CollectBundleResourcesDependsOn);
			UnoResizetizeCollectItems;
		</CollectBundleResourcesDependsOn>

		<CompileImageAssetsDependsOn>
			$(CompileImageAssetsDependsOn);
			UnoResizetizeCollectItems;
		</CompileImageAssetsDependsOn>

		<UnoResizetizeAfterTargets>
			$(UnoResizetizeAfterTargets);
			UnoResizetizeCollectItems;
		</UnoResizetizeAfterTargets>

		<CollectAppManifestsDependsOn>
			ProcessUnoSplashScreens;
			$(CollectAppManifestsDependsOn)
		</CollectAppManifestsDependsOn>
	</PropertyGroup>

	<!-- Android -->
	<PropertyGroup Condition="'$(_UnoResizetizerIsAndroidApp)' == 'True'">
		<UnoResizetizerPlatformType>android</UnoResizetizerPlatformType>
		<UnoResizetizeBeforeTargets>
			UnoAssetsGeneration;
			UnoResourcesGeneration;
			$(UnoResizetizeBeforeTargets);
			_GenerateAndroidResourceDir;
			AssignTargetPaths;
		</UnoResizetizeBeforeTargets>

		<UnoResizetizeCollectItemsBeforeTargets>
			_ComputeAndroidResourcePaths;
			$(UnoResizetizeCollectItemsAfterTargets);
			UnoAssetsGeneration;
			GenerateMSBuildEditorConfigFileShouldRun;
			GenerateMSBuildEditorConfigFileCore;
		</UnoResizetizeCollectItemsBeforeTargets>

		<UnoResizetizeAfterTargets>
			UnoResizetizeCollectItems;
			$(UnoResizetizeAfterTargets);
			UnoAssetsGeneration;
		</UnoResizetizeAfterTargets>
	</PropertyGroup>

	<!-- UWP / WinUI -->
	<PropertyGroup Condition="'$(_UnoResizetizerIsWindowsAppSdk)' == 'True'">
		<UnoResizetizerPlatformType>uwp</UnoResizetizerPlatformType>

		<UnoResizetizeBeforeTargets>
			UnoAssetsGeneration;
			$(UnoResizetizeBeforeTargets);
			AssignTargetPaths;
		</UnoResizetizeBeforeTargets>

		<UnoGeneratePackageAppxManifestDependsOnTargets>
			$(UnoGeneratePackageAppxManifestDependsOnTargets);
			UnoResizetizeCollectItems;
		</UnoGeneratePackageAppxManifestDependsOnTargets>
	</PropertyGroup>

	<!-- WPF/ SKIA -->
	<PropertyGroup Condition="'$(_UnoResizetizerIsSkiaApp)' == 'True'">
		<UnoResizetizerPlatformType>wpf</UnoResizetizerPlatformType>

		<UnoResizetizeBeforeTargets>
			$(UnoResizetizeBeforeTargets);
			FileClassification;
		</UnoResizetizeBeforeTargets>
	</PropertyGroup>

	<!-- Uno Icon -->
	<ItemGroup>
		<_WindowIconExtension Include="$(_UnoResizetizerIntermediateOutputRoot)Uno.Resizetizer.WindowIconExtensions.g.cs"/>
	</ItemGroup>


	<Target Name="ValidateAvailableItems"
			BeforeTargets="UnoResizetizeCollectItems"
			DependsOnTargets="_ResizetizerInitialize">

		<Warning
				Condition="'%(UnoIcon.Link)' != ''"
				Text="The UnoIcon.Link property will be ignored."/>

		<Warning
				Condition="'@(UnoIcon->Count())' &gt; '1'"
				Text="More than one 'UnoIcon' is defined; only the first will be used." />

		<Warning
				Condition="'@(UnoSplashScreen->Count())' &gt; '1'"
				Text="More than one 'UnoSplashScreen' is defined; only the first will be used." />

		<Warning
				Condition="'%(UnoSplashScreen.Link)' != ''"
				Text="The UnoSplashScreen.Link property will be ignored."/>

		<Error
				Condition="'@(UnoSplashScreen)' != '' And '@(UnoSplashScreen)' == '@(UnoIcon)'"
				Text="The value of UnoSplashScreen and UnoIcon cannot be the same."/>

		<Error
				Condition="'@(UnoSplashScreen)' != '' And '@(UnoSplashScreen)' == '%(UnoIcon.ForegroundFile)'"
				Text="The value of UnoSplashScreen and UnoIcon.ForegroundFile cannot be the same."/>
	</Target>

	<!-- Finds absolute paths to any UnoImage in this project -->
	<!-- App head projects will invoke this target on their project references to collect images -->
	<Target Name="GetUnoItems" Outputs="@(ExportedUnoItem)">
		<ItemGroup>
			<UnoItem Include="@(UnoImage)" ItemGroupName="UnoImage" Condition="'%(UnoImage.ForegroundFile)' == ''"/>
			<UnoItem Include="@(UnoImage)" ItemGroupName="UnoImage" Condition="'%(UnoImage.ForegroundFile)' != ''" ForegroundFile="$([System.IO.Path]::GetFullPath('%(UnoImage.ForegroundFile)'))" ProjectDirectory="$(MSBuildProjectDirectory)"/>
			<UnoItem Include="@(UnoIcon)" ItemGroupName="UnoIcon" Condition="'%(UnoIcon.ForegroundFile)' != ''" ForegroundFile="$([System.IO.Path]::GetFullPath('%(UnoIcon.ForegroundFile)'))"/>
			<UnoItem Include="@(UnoAsset)" ItemGroupName="UnoAsset" ProjectDirectory="$(MSBuildProjectDirectory)"/>
			<UnoItem Include="@(UnoSplashScreen)" ItemGroupName="UnoSplashScreen"/>
		</ItemGroup>

		<ConvertToAbsolutePath Paths="@(UnoItem)">
			<Output TaskParameter="AbsolutePaths" ItemName="ExportedUnoItem"/>
		</ConvertToAbsolutePath>
	</Target>


        <!--
           This target is executed before Uno's assets generation task, which takes Content and generates
           native assets. This way, UnoImage items are not duplicated in AndroidAssets or others, and only
           generated assets are embedded in the app.
        -->
	<Target Name="_UnoResizetizer_CleanUpUnoImageFromContent"
		BeforeTargets="UnoAssetsGeneration;_UnoAddAssetsFilesToCopyLocal">

		<CleanupAssetsTask_v0 UnoImagesCollection="@(UnoImage)"
							  ContentCollection="@(ContentFilesProjectOutputGroupOutput)"
							  AndroidAssetCollection="@(AndroidAsset)">
			<Output TaskParameter="ContentCollection" ItemName="ContentResult"/>
			<Output TaskParameter="AndroidAssetCollection" ItemName="AndroidAssetResult"/>
			<Output TaskParameter="RemovedFiles" ItemName="ItemsToNotIncludeOnContentFilesProjectOutputGroup"/>
		</CleanupAssetsTask_v0>

		<ItemGroup>
			<ContentFilesProjectOutputGroupOutput Remove="@(ContentFilesProjectOutputGroupOutput)" />
			<ContentFilesProjectOutputGroupOutput Include="@(ContentResult)" />
		</ItemGroup>
		
		<ItemGroup Condition="$(_UnoResizetizerPlatformIsAndroid) == 'true'">
			<AndroidAsset Remove="@(AndroidAsset)"/>
			<AndroidAsset Include="@(AndroidAssetResult)"/>
		</ItemGroup>
	</Target>

        <!-- 
            This target removes UnoImage processed content from transitive content propagation
            when the head project enumerates content from its project references. This is needed
            in order to avoid getting duplicate AndroidAssets.
         -->

	<Target Name="_UnoResizetizer_CleanUpContentFilesProjectOutputGroupOutput"
			BeforeTargets="_UnoAddAssetsFilesToCopyLocal"
			AfterTargets="ContentFilesProjectOutputGroup">

		<RemoveSvgFromContentTask_v0 CollectionToRemove="@(ContentFilesProjectOutputGroupOutput)" 
				UnoImages="@(UnoImage)">
			<Output TaskParameter="RemovedItems" ItemName="FinalResult"/>
		</RemoveSvgFromContentTask_v0>

		<ItemGroup>
			<ContentFilesProjectOutputGroupOutput Remove="@(FinalResult)"/>
		</ItemGroup>
	</Target>

	<!-- Collect images from referenced projects -->
	<Target Name="UnoResizetizeCollectItems"
			Condition="'$(_UnoResizetizerIsCompatibleApp)' == 'True' And '$(DisableUnoResizetizer)' != 'true'"
			BeforeTargets="$(UnoResizetizeCollectItemsBeforeTargets)"
			AfterTargets="$(UnoResizetizeCollectItemsAfterTargets)">

		<CallTarget Targets="GetUnoItems" Condition="'$(UnoResizetizerIncludeSelfProject)' == 'True'">
			<Output
					TaskParameter="TargetOutputs"
					ItemName="ImportedUnoItem"/>
		</CallTarget>

		<ItemGroup>
			<UnoImage
					Include="@(ImportedUnoItem)"
					Condition="'%(ImportedUnoItem.ItemGroupName)' == 'UnoImage'"/>
			<UnoIcon
					Include="@(ImportedUnoItem)"
					Condition="'%(ImportedUnoItem.ItemGroupName)' == 'UnoIcon'"/>
			<UnoAsset
					Include="@(ImportedUnoItem)"
					Condition="'%(ImportedUnoItem.ItemGroupName)' == 'UnoAsset'"/>
			<UnoSplashScreen
					Include="@(ImportedUnoItem)"
					Condition="'%(ImportedUnoItem.ItemGroupName)' == 'UnoSplashScreen'"/>
		</ItemGroup>

		<!-- Make sure animated gifs are not resized by default -->
		<ItemGroup>
			<UnoImage Update="@(UnoImage)" Resize="False" Condition="'%(UnoImage.Extension)' == '.gif' and '%(UnoImage.Resize)' == ''"/>
		</ItemGroup>


		<!-- Map @(UnoIcon) to @(UnoImage IsAppIcon=true) -->
		<ItemGroup>
			<UnoImage Include="@(UnoIcon)" IsAppIcon="True" Link="%(UnoIcon.Link)" />
		</ItemGroup>

		<!-- Write out item spec and metadata to a file we can use as an inputs for the resize target -->
		<!-- This allows us to invalidate the build based on not just input image files changing but project item metadata as well -->
		<WriteLinesToFile
				File="$(_UnoResizetizerInputsFile)"
				Lines="@(UnoImage->'File=%(Identity);Link=%(Link);BaseSize=%(BaseSize);Resize=%(Resize);TintColor=%(TintColor);Color=%(Color);IsAppIcon=%(IsAppIcon);ForegroundScale=%(ForegroundScale);ForegroundFile=%(ForegroundFile)')"
				Overwrite="true"
				WriteOnlyWhenDifferent="true"/>

		<WriteLinesToFile
				File="$(_UnoSplashInputsFile)"
				Lines="@(UnoSplashScreen->'File=%(Identity);Link=%(Link);BaseSize=%(BaseSize);Resize=%(Resize);TintColor=%(TintColor);Color=%(Color);ForegroundScale=%(ForegroundScale)')"
				Overwrite="true"
				WriteOnlyWhenDifferent="true"/>

		<ItemGroup>
			<AdditionalFiles Include="$(_UnoResizetizerInputsFile)"/>
			<FileWrites Include="$(_UnoResizetizerInputsFile)"/>
			<FileWrites Include="$(_UnoSplashInputsFile)"/>
		</ItemGroup>
		<ItemGroup>
			<_SkiaManifest Include="@(EmbeddedResource)"
						   Condition="%(Extension) == '.appxmanifest'"/>

			<EmbeddedResource Remove="@(EmbeddedResource)"
							  Condition="%(Extension) == '.appxmanifest'"/>
		</ItemGroup>
	</Target>

	<Target Name="ProcessUnoAssets">
		<PropertyGroup Condition="'$(_UnoResizetizerIsWindowsAppSdk)' == 'True'">
			<_UnoAssetItemMetadata>TargetPath</_UnoAssetItemMetadata>
		</PropertyGroup>
		<ItemGroup Condition="'$(_UnoResizetizerIsWindowsAppSdk)' == 'True'">
			<!-- Windows does not recognize %(LogicalName), so we must copy it to %(Link) -->
			<UnoAsset Update="@(UnoAsset)" Link="%(UnoAsset.LogicalName)" Condition="'%(UnoAsset.Link)' == '' And '%(UnoAsset.LogicalName)' != ''"/>
		</ItemGroup>

		<GetUnoAssetPath_v0
				ProjectDirectory="$(MSBuildProjectDirectory)"
				ItemMetadata="$(_UnoAssetItemMetadata)"
				Input="@(UnoAsset)">
			<Output ItemName="AndroidAsset" TaskParameter="Output" Condition="'$(_UnoResizetizerIsAndroidApp)' == 'True'"/>
			<Output ItemName="Content" TaskParameter="Output" Condition="'$(_UnoResizetizerIsiOSApp)' == 'True'"/>
			<Output ItemName="ContentWithTargetPath" TaskParameter="Output" Condition="'$(_UnoResizetizerIsWindowsAppSdk)' == 'True'"/>
		</GetUnoAssetPath_v0>
	</Target>

	<!-- This target is meant to be called by platform specific splash screen targets -->
	<Target Name="GenerateUnoSplashScreens"
			Condition="'@(UnoSplashScreen)' != ''">

		<!--If not Windows-->
		<ItemGroup Condition="$(_UnoResizetizerIsWasmApp) == 'True' Or $(_UnoResizetizerIsSkiaApp) == 'True' or '$(_UnoResizetizerIsAndroidApp)' == 'True' or ('$(_UnoResizetizerIsiOSApp)' == 'True' and '$(TargetPlatformIdentifier)' != 'maccatalyst')">
			<UnoImage Include="@(UnoSplashScreen)" IsSplashScreen="True" Link=""/>
		</ItemGroup>

		<MakeDir Directories="$(IntermediateOutputPath)"/>
		<!-- Stamp file for Outputs -->
		<Touch Files="$(_UnoSplashStampFile)" AlwaysCreate="True"/>
		<ItemGroup>
			<FileWrites Include="$(_UnoSplashStampFile)"/>
		</ItemGroup>
	</Target>

	<!-- UnoResizetizeImages must run at design time to avoid interactions with the `.R` generation on Android -->
	<Target Name="UnoResizetizeImages"
			Inputs="$(MSBuildThisFileFullPath);$(_UnoResizetizerTaskAssemblyName);$(_UnoResizetizerInputsFile);@(UnoImage);$(_UnoSplashInputsFile)"
			Outputs="$(_UnoResizetizerStampFile)"
			AfterTargets="$(UnoResizetizeAfterTargets)"
			BeforeTargets="$(UnoResizetizeBeforeTargets)"
			DependsOnTargets="$(UnoResizetizeDependsOnTargets)"
			Condition="
				'$(DesignTimeBuild)' != 'true' 
				OR $([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android' ">

		<DetectInvalidResourceOutputFilenamesTask_v0
				Items="@(UnoImage->Distinct())"
				ErrorMessage="$(_UnoResizetizerDefaultInvalidFilenamesErrorMessage)">
		</DetectInvalidResourceOutputFilenamesTask_v0>

		<!-- Resize the images -->
		<ResizetizeImages_v0
				PlatformType="$(UnoResizetizerPlatformType)"
				IntermediateOutputPath="$(_UnoIntermediateImages)"
				IntermediateOutputIconPath="$(_UnoIntermediateAppIcon)"
				PWAManifestPath="$(_WasmPwaManifestPath)"
				InputsFile="$(_UnoResizetizerInputsFile);$(_UnoSplashInputsFile)"
				TargetFramework="$(_UnoResizetizerPlatformIdentifier)"
				Images="@(UnoImage->Distinct())">

			<Output PropertyName="AppIconPath"
					TaskParameter="GeneratedIconPath"/>
			<Output PropertyName="AndroidIcons"
					TaskParameter="AndroidAppIcons"/>
			<Output PropertyName="UnoResizetizerPwaManifest"
					TaskParameter="PwaGeneratedManifestPath"/>
		</ResizetizeImages_v0>

		<ItemGroup>
			<!-- Get Images that were generated -->
			<!-- Either from the task, or if the task was skipped (up to date), use the wildcard lookup -->
			<_UnoResizetizerCollectedImages Condition="'@(CopiedResources)' != ''" Include="@(CopiedResources)"/>
			<_UnoResizetizerCollectedImages Condition="'@(CopiedResources)' == ''" Include="$(_UnoIntermediateImages)**\*"/>
			<_UnoResizetizerCollectedAppIcons Include="$(_UnoIntermediateAppIcon)**\*"/>

			<!-- If the AppIcon property is empty we can try to find it on the disk -->
			<_AppIconItemGroup Condition="'$(AppIconPath)' == ''" Include="$(_UnoResizetizerIntermediateOutputRoot)**\*.ico"/>
		</ItemGroup>

		<PropertyGroup>
			<!-- If the PWA manifest is empty we can try to find it on disk -->
			<_UnoResizetizerPwaManifest>$(_UnoIntermediateAppIcon)..\$([System.IO.Path]::GetFileName($(WasmPWAManifestFile)))</_UnoResizetizerPwaManifest>
			<UnoResizetizerPwaManifest Condition="
				'$(UnoResizetizerPwaManifest)'=='' and
				Exists('$(_UnoResizetizerPwaManifest)')">$(_UnoResizetizerPwaManifest)</UnoResizetizerPwaManifest>
			<!-- If the AppIcon property is empty we can try to find it on the disk -->
			<AppIconPath Condition="'$(AppIconPath)' == ''">%(_AppIconItemGroup.Identity)</AppIconPath>
		</PropertyGroup>

		<PropertyGroup>
			<ApplicationIcon Condition="'$(ApplicationIcon)' == ''">$(AppIconPath)</ApplicationIcon>
		</PropertyGroup>

		<MakeDir Directories="$(IntermediateOutputPath)"/>
		<!-- Touch/create our stamp file for outputs -->
		<Touch Files="$(_UnoResizetizerStampFile)" AlwaysCreate="True"/>

		<!-- Include our images and stamp file as filewrites so they don't get rm'd -->
		<ItemGroup>
			<FileWrites Include="$(_UnoResizetizerStampFile)"/>
		</ItemGroup>
	</Target>

	<!-- ProcessResizedImages must run at design time to avoid interactions with the `.R` generation on Android -->
	<Target Name="ProcessResizedImages"
			AfterTargets="UnoResizetizeImages"
			DependsOnTargets="UnoResizetizeImages"
			Condition="
				'$(DesignTimeBuild)' != 'true' 
				OR $([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android' ">

		<ItemGroup Condition="'$(_UnoResizetizerIsWasmApp)' != 'True'">
			<Content Include="@(_UnoResizetizerCollectedImages)"
					 Link="%(_UnoResizetizerCollectedImages.RecursiveDir)%(_UnoResizetizerCollectedImages.Filename)%(_UnoResizetizerCollectedImages.Extension)"
					 TargetPath="%(_UnoResizetizerCollectedImages.RecursiveDir)%(_UnoResizetizerCollectedImages.Filename)%(_UnoResizetizerCollectedImages.Extension)" />

			<!-- 
				Resizetizer output for WinAppSDK needs to be set to PreserveNewest
				in order to be present in the final layout of an unpackaged app
			-->
			<Content Update="@(_UnoResizetizerCollectedImages)"
					 Condition="'$(_UnoResizetizerIsWindowsAppSdk)' == 'True'"
					 CopyToOutputDirectory="PreserveNewest"/>
			
			<Content Update="@(Content)"
					 Condition="'%(Content.Extension)' == '.ico' And '$(_UnoResizetizerIsWindowsAppSdk)' == 'True'"
					 CopyToOutputDirectory="PreserveNewest"/>

			<FileWrites Include="@(_UnoResizetizerCollectedImages)"/>
		</ItemGroup>


		<!--
		Disables "XA0101 build action is not supported" as Uno handles Content items explicitly
		https://github.com/xamarin/xamarin-android/blob/311b41e864a0162895d079477cb9398fbec5ca6e/src/Xamarin.Android.Build.Tasks/Xamarin.Android.Common.targets#L833
		-->
		<ItemGroup Condition="'$(MonoAndroidAssetsPrefix)'!=''">
			<Content Update="@(_UnoResizetizerCollectedImages)" ExcludeFromContentCheck="true"/>
		</ItemGroup>
	</Target>

	<Target Name="_CleanUnoResizetizer">
		<ItemGroup>
			<_ResizetizerFilesToClean Include="$(_UnoResizetizerInputsFile)"/>
			<_ResizetizerFilesToClean Include="$(_UnoResizetizerStampFile)"/>
			<_ResizetizerFilesToClean Include="$(_UnoSplashInputsFile)"/>
			<_ResizetizerFilesToClean Include="$(_UnoSplashStampFile)"/>
			<_ResizetizerFilesToClean Include="$(_UnoManifestStampFile)"/>
		</ItemGroup>
		<RemoveDir Directories="$(_UnoResizetizerIntermediateOutputRoot)" Condition="Exists ('$(_UnoResizetizerIntermediateOutputRoot)' )"/>
		<Delete Files="@(_ResizetizerFilesToClean)" />

		<ItemGroup>
			<_ResizetizerFilesToClean Remove="@(_ResizetizerFilesToClean)"/>
		</ItemGroup>
	</Target>

	<Target Name="SetUnoImage"
			BeforeTargets="GenerateMSBuildEditorConfigFileShouldRun;GenerateMSBuildEditorConfigFileCore;ResolveFrameworkReferencesDesignTime;ResolveProjectReferencesDesignTime2;CollectAnalyzersDesignTime;GetAndroidDependencies">
		<CreateProperty Value="@(UnoIcon, ',')">
			<Output TaskParameter="Value"
					PropertyName="UnoResizetizerIcon" />
		</CreateProperty>
	</Target>

	<Target Name="_AddResizetizerWindowIconExtensions"
			Condition="'$(_UnoResizetizerIsCompatibleApp)' == 'True' and '$(UnoResizetizerDisableWindowIconExtensions)'!='true'"
			AfterTargets="_GenerateWindowUnoIconExtension"
			BeforeTargets="Build;CoreCompile;XamlPreCompile">
		<ItemGroup Condition="Exists('@(_WindowIconExtension->FullPath())')">
			<Compile Include="@(_WindowIconExtension)"/>
		</ItemGroup>
	</Target>

	<!--
		This is used to get and copy the native runtime assets. This is a workaround as the assets aren't properly loading

		Executed before UnoResizetizeImages for TargetFrameworks=='' and TargetFramework!=''
		Executed before _SetBuildInnerTarget;_ComputeTargetFrameworkItems for TargetFrameworks!='' and TargetFramework==''		
	-->
	<Target Name="_ResizetizerInitialize"
		BeforeTargets="UnoResizetizeImages;_SetBuildInnerTarget;_ComputeTargetFrameworkItems">
		<PropertyGroup>
			<_ResizetizerRuntimeIdentifier>$(NETCoreSdkPortableRuntimeIdentifier)</_ResizetizerRuntimeIdentifier>
			<!-- NOTE: We may need to adjust this in the future if we end up with assets compiled for osx-arm64 and osx-x64 -->
			<_ResizetizerRuntimeIdentifier Condition=" $(_ResizetizerRuntimeIdentifier.Contains('osx')) ">osx</_ResizetizerRuntimeIdentifier>
			<_ResizetizerRuntimeIdentifierDirectory>$([MSBuild]::NormalizePath('$(MSBuildThisFileDirectory)', 'netstandard2.0', 'runtimes', '$(_ResizetizerRuntimeIdentifier)'))</_ResizetizerRuntimeIdentifierDirectory>
			<_ResizetizerRuntimeAssetsOutput>$([MSBuild]::NormalizePath('$(MSBuildThisFileDirectory)', 'netstandard2.0'))</_ResizetizerRuntimeAssetsOutput>
		</PropertyGroup>

		<ItemGroup>
			<_ResiztizerRuntimeAssets Include="$(_ResizetizerRuntimeIdentifierDirectory)\**\*"
				OutputDirectory="$(_ResizetizerRuntimeAssetsOutput)" />
		</ItemGroup>

		<Error Text="No Runtime was found."
			Condition="$(_ResizetizerRuntimeIdentifier) == ''" />

		<Error Text="The selected runtime directory does not exist"
			Condition="!Exists('$(_ResizetizerRuntimeIdentifierDirectory)')" />
		
		<!-- 
			Try to copy files with one retry, fail fast and ignore the error if this happens, then retry 
			copying the files in a second time. This is present to avoid a race condition during 
			cross-targeted builds when this current target is executed concurrently.
			
			When running, the Copy task may detect that files are not present for two 
			threads/processes, then assume it's safe to copy, while only one of them can do 
			so. Later on, the copied files may be locked by dotnet/msbuild and the other copy
			instance never finishes sucessfully, regardless of SkipUnchangedFiles.
		-->
		<Copy SourceFiles="@(_ResiztizerRuntimeAssets)"
			DestinationFiles="@(_ResiztizerRuntimeAssets->'%(OutputDirectory)\%(Filename)%(Extension)')"
			SkipUnchangedFiles="true"
			OverwriteReadOnlyFiles="true"
			Condition="Exists('$(_ResizetizerRuntimeIdentifierDirectory)')"
			UseHardlinksIfPossible="true"
			ContinueOnError="true"
			Retries="1"
			UseSymboliclinksIfPossible="true" />

		<Copy SourceFiles="@(_ResiztizerRuntimeAssets)"
			DestinationFiles="@(_ResiztizerRuntimeAssets->'%(OutputDirectory)\%(Filename)%(Extension)')"
			SkipUnchangedFiles="true"
			OverwriteReadOnlyFiles="true"
			Condition="Exists('$(_ResizetizerRuntimeIdentifierDirectory)')"
			UseHardlinksIfPossible="true"
			UseSymboliclinksIfPossible="true" />

	</Target>

</Project>
