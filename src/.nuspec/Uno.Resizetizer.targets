<?xml version="1.0" encoding="UTF-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<ItemGroup>
		<AvailableItemName Include="UnoAsset" />
		<AvailableItemName Include="UnoImage" />
		<AvailableItemName Include="UnoIcon" />
		<AvailableItemName Include="UnoSplashScreen" />
	</ItemGroup>

	<PropertyGroup>
		<_UnoResizetizerTaskAssemblyName>$(MSBuildThisFileDirectory)Uno.Resizetizer_v0.dll</_UnoResizetizerTaskAssemblyName>
	</PropertyGroup>

	<UsingTask
		AssemblyFile="$(_UnoResizetizerTaskAssemblyName)"
		TaskName="Uno.Resizetizer.ResizetizeImages_v0" />

	<UsingTask
		AssemblyFile="$(_UnoResizetizerTaskAssemblyName)"
		TaskName="Uno.Resizetizer.DetectInvalidResourceOutputFilenamesTask_v0"  />

	<UsingTask
		AssemblyFile="$(_UnoResizetizerTaskAssemblyName)"
		TaskName="Uno.Resizetizer.CreatePartialInfoPlistTask_v0"  />

	<UsingTask
		AssemblyFile="$(_UnoResizetizerTaskAssemblyName)"
		TaskName="Uno.Resizetizer.GenerateSplashAndroidResources_v0"  />

	<UsingTask
		AssemblyFile="$(_UnoResizetizerTaskAssemblyName)"
		TaskName="Uno.Resizetizer.GenerateSplashStoryboard_v0"  />

	<UsingTask
		AssemblyFile="$(_UnoResizetizerTaskAssemblyName)"
		TaskName="Uno.Resizetizer.GenerateSplashAssets_v0"  />

	<UsingTask
		AssemblyFile="$(_UnoResizetizerTaskAssemblyName)"
		TaskName="Uno.Resizetizer.GetUnoAssetPath_v0"  />

	<UsingTask
		AssemblyFile="$(_UnoResizetizerTaskAssemblyName)"
		TaskName="Uno.Resizetizer.GeneratePackageAppxManifest_v0"  />

	<UsingTask
		AssemblyFile="$(_UnoResizetizerTaskAssemblyName)"
		TaskName="Uno.Resizetizer.GenerateWasmSplashAssets_v0"  />

	<UsingTask
		AssemblyFile="$(_UnoResizetizerTaskAssemblyName)"
		TaskName="Uno.Resizetizer.WindowIconGeneratorTask_V0" />

	<PropertyGroup>
		<CleanDependsOn>
			$(CleanDependsOn);
			_CleanUnoResizetizer_v0;
		</CleanDependsOn>

		<_ResizetizerInputsFile>$(IntermediateOutputPath)UnoImage.inputs</_ResizetizerInputsFile>
		<_ResizetizerStampFile>$(IntermediateOutputPath)UnoImage.stamp</_ResizetizerStampFile>
		<_UnoSplashInputsFile>$(IntermediateOutputPath)Unosplash.inputs</_UnoSplashInputsFile>
		<_UnoSplashStampFile>$(IntermediateOutputPath)Unosplash.stamp</_UnoSplashStampFile>
		<_UnoManifestStampFile>$(IntermediateOutputPath)Unomanifest.stamp</_UnoManifestStampFile>


		<_ResizetizerIntermediateOutputRoot>$(IntermediateOutputPath)resizetizer\</_ResizetizerIntermediateOutputRoot>
		<_UnoIntermediateImages>$(_ResizetizerIntermediateOutputRoot)r\</_UnoIntermediateImages>
		<_UnoIntermediateAppIcon>$(_ResizetizerIntermediateOutputRoot)AppIcons\</_UnoIntermediateAppIcon>
		<_UnoIntermediateSplashScreen>$(_ResizetizerIntermediateOutputRoot)sp\</_UnoIntermediateSplashScreen>
		<_UnoIntermediateManifest>$(_ResizetizerIntermediateOutputRoot)m\</_UnoIntermediateManifest>
		<_UnoIntermediateStoryboard>$(_UnoIntermediateSplashScreen)UnoSplash.storyboard</_UnoIntermediateStoryboard>
		<_UnoIntermediateAppManifestWasm>$(_UnoIntermediateSplashScreen)UnoAppManifest.js</_UnoIntermediateAppManifestWasm>

		<_ResizetizerPlatformIdentifier>$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)'))</_ResizetizerPlatformIdentifier>
		<_ResizetizerNoTargetPlatform Condition="'$(_ResizetizerPlatformIdentifier)' == ''">True</_ResizetizerNoTargetPlatform>
		<_ResizetizerPlatformIsAndroid Condition="'$(_ResizetizerPlatformIdentifier)' == 'android'">True</_ResizetizerPlatformIsAndroid>
		<_ResizetizerPlatformIsiOS Condition="'$(_ResizetizerPlatformIdentifier)' == 'ios'">True</_ResizetizerPlatformIsiOS>
		<_ResizetizerPlatformIsMacCatalyst Condition="'$(_ResizetizerPlatformIdentifier)' == 'maccatalyst'">True</_ResizetizerPlatformIsMacCatalyst>
		<_ResizetizerPlatformIsmacOS Condition="'$(_ResizetizerPlatformIdentifier)' == 'macos'">True</_ResizetizerPlatformIsmacOS>
		<_ResizetizerPlatformIstvOS Condition="'$(_ResizetizerPlatformIdentifier)' == 'tvos'">True</_ResizetizerPlatformIstvOS>
		<_ResizetizerPlatformIsWindows Condition="$(_ResizetizerPlatformIdentifier.Contains('windows')) == 'True'">True</_ResizetizerPlatformIsWindows>

		<ResizetizerIncludeSelfProject Condition="'$(ResizetizerIncludeSelfProject)' == ''">False</ResizetizerIncludeSelfProject>

		<_ResizetizerDefaultInvalidFilenamesErrorMessage>One or more invalid file names were detected.  File names must be lowercase, start and end with a letter character, and contain only alphanumeric characters or underscores: </_ResizetizerDefaultInvalidFilenamesErrorMessage>

		<_WasmHasPWAManifest>False</_WasmHasPWAManifest>
		<_WasmHasPWAManifest Condition="'$(WasmPWAManifestFile)' != ''">True</_WasmHasPWAManifest>
		<_WasmPwaManifestPath Condition="'$(_WasmHasPWAManifest)' == 'True'">$(MSBuildProjectDirectory)\$(WasmPWAManifestFile)</_WasmPwaManifestPath>
	</PropertyGroup>

	<PropertyGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp'">
		<_ResizetizerIsNetCore>True</_ResizetizerIsNetCore>
		<_ResizetizerIsSkiaApp Condition="'$(UnoRuntimeIdentifier)' == 'Skia'">True</_ResizetizerIsSkiaApp>
		<_ResizetizerIsAndroidApp Condition=" '$(_ResizetizerPlatformIsAndroid)' == 'True' And '$(AndroidApplication)' == 'True'">True</_ResizetizerIsAndroidApp>
		<_ResizetizerIsiOSApp Condition="( '$(_ResizetizerPlatformIsiOS)' == 'True' OR '$(_ResizetizerPlatformIsMacCatalyst)' == 'True' ) And ('$(OutputType)' == 'Exe' Or '$(IsAppExtension)' == 'True')">True</_ResizetizerIsiOSApp>
		<_ResizetizerIsWindowsAppSdk Condition="('$(ProjectReunionWinUI)'=='True' Or '$(WindowsAppSDKWinUI)'=='True') And '$(_ResizetizerPlatformIsWindows)' == 'True' And ('$(OutputType)' == 'WinExe' Or '$(OutputType)' == 'Exe')">True</_ResizetizerIsWindowsAppSdk>
		<_ResizetizerIsWasmApp Condition="'$(UnoRuntimeIdentifier)' == 'WebAssembly'">True</_ResizetizerIsWasmApp>
	</PropertyGroup>

	<PropertyGroup Condition="'$(_ResizetizerIsAndroidApp)' == 'True' Or '$(_ResizetizerIsiOSApp)' == 'True' Or '$(_ResizetizerIsSkiaApp)' == 'True' Or '$(_ResizetizerIsWindowsAppSdk)' == 'True' Or '$(_ResizetizerIsWasmApp)' == 'True'">
		<_ResizetizerIsCompatibleApp>True</_ResizetizerIsCompatibleApp>

<<<<<<< HEAD
		<ResizetizeDependsOnTargets>
			$(ResizetizeDependsOnTargets);
			ResizetizeCollectItems;
			ProcessUnoSplashScreens;
		</ResizetizeDependsOnTargets>
=======
		<UnoResizetizeDependsOnTargets>
			$(UnoResizetizeDependsOnTargets);
			UnoResizetizeCollectItems_v0;
			ProcessUnoSplashScreens_v0;
		</UnoResizetizeDependsOnTargets>
>>>>>>> 47b9035 (fix: normalize with Uno prefix and _v0 on task names)
	</PropertyGroup>

	<PropertyGroup Condition="$(_ResizetizerNoTargetPlatform) == 'True' Or '$(_ResizetizerIsCompatibleApp)' != 'True'">
		<ResizetizerIncludeSelfProject>true</ResizetizerIncludeSelfProject>
		<ResizetizerPlatformType>netstandard</ResizetizerPlatformType>

		<ResizetizeBeforeTargets>
			$(ResizetizeBeforeTargets);
			AssignTargetPaths;
		</ResizetizeBeforeTargets>

<<<<<<< HEAD
		<ResizetizeAfterTargets>
			ResizetizeCollectItems;
			$(ResizetizeAfterTargets);
=======
		<UnoResizetizeAfterTargets>
			UnoResizetizeCollectItems_v0;
			$(UnoResizetizeAfterTargets);
>>>>>>> 47b9035 (fix: normalize with Uno prefix and _v0 on task names)
			UnoAssetsGeneration;
			BuildDist;
		</ResizetizeAfterTargets>
	</PropertyGroup>

	<!-- Skia -->
	<PropertyGroup Condition="'$(_ResizetizerIsSkiaApp)' == 'True'">
		<ResizetizerIncludeSelfProject>false</ResizetizerIncludeSelfProject>

		<ResizetizeBeforeTargets>
			UnoAssetsGeneration;
			$(ResizetizeBeforeTargets);
			AssignTargetPaths;
		</ResizetizeBeforeTargets>

		<UnoGeneratePackageAppxManifestDependsOnTargets>
			$(UnoGeneratePackageAppxManifestDependsOnTargets);
			UnoResizetizeCollectItems_v0;
		</UnoGeneratePackageAppxManifestDependsOnTargets>

		<UnoGeneratePackageAppxManifestBeforeTargets>
			$(UnoGeneratePackageAppxManifestDependsOnTargets);
			SplitResourcesByCulture;
			AssignTargetPaths;
		</UnoGeneratePackageAppxManifestBeforeTargets>
	</PropertyGroup>

	<!-- Wasm -->
	<PropertyGroup Condition="'$(_ResizetizerIsWasmApp)' == 'True'">
		<ResizetizerPlatformType>wasm</ResizetizerPlatformType>
		<ResizetizerIncludeSelfProject>false</ResizetizerIncludeSelfProject>

		<ResizetizeBeforeTargets>
			$(ResizetizeBeforeTargets);
			AssignTargetPaths;

		</ResizetizeBeforeTargets>

<<<<<<< HEAD
		<ResizetizeAfterTargets>
			ResizetizeCollectItems;
			$(ResizetizeAfterTargets);
=======
		<UnoResizetizeAfterTargets>
			UnoResizetizeCollectItems_v0;
			$(UnoResizetizeAfterTargets);
>>>>>>> 47b9035 (fix: normalize with Uno prefix and _v0 on task names)
			UnoAssetsGeneration;
			BuildDist;
		</ResizetizeAfterTargets>
	</PropertyGroup>

	<!-- iOS -->
	<PropertyGroup Condition="'$(_ResizetizerIsiOSApp)' == 'True'">
		<ResizetizerPlatformType>ios</ResizetizerPlatformType>

		<!-- We don't want to resizetize anything for an inner build when building a universal app, it's enough to only do it in the outer build -->
		<DisableResizetizer Condition="'$(_IsMultiRidBuild)' == 'true'">true</DisableResizetizer>

		<ResizetizeBeforeTargets>
			UnoAssetsGeneration;
			_CollectBundleResources;
			_BeforeCoreCompileImageAssets;
		</ResizetizeBeforeTargets>

		<CollectBundleResourcesDependsOn>
			$(CollectBundleResourcesDependsOn);
			UnoResizetizeCollectItems_v0;
		</CollectBundleResourcesDependsOn>

		<CompileImageAssetsDependsOn>
			$(CompileImageAssetsDependsOn);
			UnoResizetizeCollectItems_v0;
		</CompileImageAssetsDependsOn>

<<<<<<< HEAD
		<ResizetizeAfterTargets>
			$(ResizetizeAfterTargets);
			ResizetizeCollectItems;
		</ResizetizeAfterTargets>
=======
		<UnoResizetizeAfterTargets>
			$(UnoResizetizeAfterTargets);
			UnoResizetizeCollectItems_v0;
		</UnoResizetizeAfterTargets>
>>>>>>> 47b9035 (fix: normalize with Uno prefix and _v0 on task names)

		<CollectAppManifestsDependsOn>
			ProcessUnoSplashScreens_v0;
			$(CollectAppManifestsDependsOn)
		</CollectAppManifestsDependsOn>
	</PropertyGroup>

	<!-- Android -->
	<PropertyGroup Condition="'$(_ResizetizerIsAndroidApp)' == 'True'">
		<ResizetizerPlatformType>android</ResizetizerPlatformType>
		<ResizetizeBeforeTargets>
			UnoAssetsGeneration;
			UnoResourcesGeneration;
			$(ResizetizeBeforeTargets);
			_GenerateAndroidResourceDir;
			AssignTargetPaths;
		</ResizetizeBeforeTargets>

		<ResizetizeCollectItemsBeforeTargets>
			_ComputeAndroidResourcePaths;
			$(UnoResizetizeCollectItemsAfterTargets);
			UnoAssetsGeneration;
		</ResizetizeCollectItemsBeforeTargets>

<<<<<<< HEAD
		<ResizetizeAfterTargets>
			ResizetizeCollectItems;
			$(ResizetizeAfterTargets);
=======
		<UnoResizetizeAfterTargets>
			UnoResizetizeCollectItems_v0;
			$(UnoResizetizeAfterTargets);
>>>>>>> 47b9035 (fix: normalize with Uno prefix and _v0 on task names)
			UnoAssetsGeneration;
		</ResizetizeAfterTargets>
	</PropertyGroup>

	<!-- UWP / WinUI -->
	<PropertyGroup Condition="'$(_ResizetizerIsUWPApp)' == 'True' Or '$(_ResizetizerIsWindowsAppSdk)' == 'True'">
		<ResizetizerPlatformType>uwp</ResizetizerPlatformType>

		<ResizetizeBeforeTargets>
			UnoAssetsGeneration;
			$(ResizetizeBeforeTargets);
			AssignTargetPaths;
		</ResizetizeBeforeTargets>

		<UnoGeneratePackageAppxManifestDependsOnTargets>
			$(UnoGeneratePackageAppxManifestDependsOnTargets);
			UnoResizetizeCollectItems_v0;
		</UnoGeneratePackageAppxManifestDependsOnTargets>
	</PropertyGroup>

	<!-- WPF/ SKIA -->
	<PropertyGroup Condition="'$(_ResizetizerIsSkiaApp)' == 'True'">
		<ResizetizerPlatformType>wpf</ResizetizerPlatformType>

		<ResizetizeBeforeTargets>
			$(ResizetizeBeforeTargets);
			FileClassification;
		</ResizetizeBeforeTargets>
	</PropertyGroup>

	<!-- Uno Icon -->
	<ItemGroup>
		<_WindowIconExtension Include="$(_ResizetizerIntermediateOutputRoot)Uno.Resizetizer.WindowIconExtensions.g.cs" />
	</ItemGroup>

	<!-- Finds absolute paths to any UnoImage in this project -->
	<!-- App head projects will invoke this target on their project references to collect images -->
	<Target Name="GetUnoItems_v0" Outputs="@(ExportedUnoItem)">
		<ItemGroup>
			<UnoItem Include="@(UnoImage)" ItemGroupName="UnoImage" Condition="'%(UnoImage.ForegroundFile)' == ''" />
			<UnoItem Include="@(UnoImage)" ItemGroupName="UnoImage" Condition="'%(UnoImage.ForegroundFile)' != ''" ForegroundFile="$([System.IO.Path]::GetFullPath('%(UnoImage.ForegroundFile)'))" ProjectDirectory="$(MSBuildProjectDirectory)" />
			<UnoItem Include="@(UnoIcon)" ItemGroupName="UnoIcon" Condition="'%(UnoIcon.ForegroundFile)' != ''" ForegroundFile="$([System.IO.Path]::GetFullPath('%(UnoIcon.ForegroundFile)'))" />
			<UnoItem Include="@(UnoAsset)" ItemGroupName="UnoAsset" ProjectDirectory="$(MSBuildProjectDirectory)" />
			<UnoItem Include="@(UnoSplashScreen)" ItemGroupName="UnoSplashScreen" />
		</ItemGroup>

		<ConvertToAbsolutePath Paths="@(UnoItem)">
			<Output TaskParameter="AbsolutePaths" ItemName="ExportedUnoItem" />
		</ConvertToAbsolutePath>
	</Target>


	<!-- Collect images from referenced projects -->
<<<<<<< HEAD
	<Target Name="ResizetizeCollectItems"
		Condition="'$(_ResizetizerIsCompatibleApp)' == 'True' And '$(DisableResizetizer)' != 'true'"
		BeforeTargets="$(ResizetizeCollectItemsBeforeTargets)"
		AfterTargets="$(ResizetizeCollectItemsAfterTargets)">
=======
	<Target Name="UnoResizetizeCollectItems_v0"
		Condition="'$(_UnoResizetizerIsCompatibleApp)' == 'True' And '$(DisableUnoResizetizer)' != 'true'"
		BeforeTargets="$(UnoResizetizeCollectItemsBeforeTargets)"
		AfterTargets="$(UnoResizetizeCollectItemsAfterTargets)">
>>>>>>> 47b9035 (fix: normalize with Uno prefix and _v0 on task names)

		<CallTarget Targets="GetUnoItems" Condition="'$(ResizetizerIncludeSelfProject)' == 'True'">
			<Output
				TaskParameter="TargetOutputs"
				ItemName="ImportedUnoItem" />
		</CallTarget>

		<ItemGroup>
			<UnoImage
				Include="@(ImportedUnoItem)"
				Condition="'%(ImportedUnoItem.ItemGroupName)' == 'UnoImage'"/>
			<UnoIcon
				Include="@(ImportedUnoItem)"
				Condition="'%(ImportedUnoItem.ItemGroupName)' == 'UnoIcon'" />
			<UnoAsset
				Include="@(ImportedUnoItem)"
				Condition="'%(ImportedUnoItem.ItemGroupName)' == 'UnoAsset'" />
			<UnoSplashScreen
				Include="@(ImportedUnoItem)"
				Condition="'%(ImportedUnoItem.ItemGroupName)' == 'UnoSplashScreen'" />
		</ItemGroup>

		<!-- Make sure animated gifs are not resized by default -->
		<ItemGroup>
			<UnoImage Update="@(UnoImage)" Resize="False" Condition="'%(UnoImage.Extension)' == '.gif' and '%(UnoImage.Resize)' == ''" />
		</ItemGroup>

		<Warning Condition="'%(UnoIcon.Link)' != ''"
				 Text ="The UnoIcon.Link property will be ignored." />

		<!-- Map @(UnoIcon) to @(UnoImage IsAppIcon=true) -->
		<ItemGroup>
			<UnoImage Include="@(UnoIcon)" IsAppIcon="True" Link="" />
		</ItemGroup>

		<!-- Write out item spec and metadata to a file we can use as an inputs for the resize target -->
		<!-- This allows us to invalidate the build based on not just input image files changing but project item metadata as well -->
		<WriteLinesToFile
			File="$(_ResizetizerInputsFile)"
			Lines="@(UnoImage->'File=%(Identity);Link=%(Link);BaseSize=%(BaseSize);Resize=%(Resize);TintColor=%(TintColor);Color=%(Color);IsAppIcon=%(IsAppIcon);ForegroundScale=%(ForegroundScale);ForegroundFile=%(ForegroundFile)')"
			Overwrite="true"
			WriteOnlyWhenDifferent="true" />

		<WriteLinesToFile
			File="$(_UnoSplashInputsFile)"
			Lines="@(UnoSplashScreen->'File=%(Identity);Link=%(Link);BaseSize=%(BaseSize);Resize=%(Resize);TintColor=%(TintColor);Color=%(Color);ForegroundScale=%(ForegroundScale)')"
			Overwrite="true"
			WriteOnlyWhenDifferent="true" />

		<ItemGroup>
			<FileWrites Include="$(_ResizetizerInputsFile)" />
			<FileWrites Include="$(_UnoSplashInputsFile)" />
		</ItemGroup>
		<ItemGroup>
			<_SkiaManifest Include="@(EmbeddedResource)"
							 Condition="%(Extension) == '.appxmanifest'"/>

			<EmbeddedResource Remove="@(EmbeddedResource)"
								Condition="%(Extension) == '.appxmanifest'"/>
		</ItemGroup>
	</Target>

<<<<<<< HEAD
	<Target Name="ProcessUnoAssets">
		<PropertyGroup Condition="'$(_ResizetizerIsUWPApp)' == 'True' Or '$(_ResizetizerIsWindowsAppSdk)' == 'True'">
=======
	<Target Name="ProcessUnoAssets_v0">
		<PropertyGroup Condition="'$(_UnoResizetizerIsUWPApp)' == 'True' Or '$(_UnoResizetizerIsWindowsAppSdk)' == 'True'">
>>>>>>> 47b9035 (fix: normalize with Uno prefix and _v0 on task names)
			<_UnoAssetItemMetadata>TargetPath</_UnoAssetItemMetadata>
		</PropertyGroup>
		<ItemGroup Condition="'$(_ResizetizerIsUWPApp)' == 'True' Or '$(_ResizetizerIsWindowsAppSdk)' == 'True'">
			<!-- Windows does not recognize %(LogicalName), so we must copy it to %(Link) -->
			<UnoAsset Update="@(UnoAsset)" Link="%(UnoAsset.LogicalName)" Condition="'%(UnoAsset.Link)' == '' And '%(UnoAsset.LogicalName)' != ''" />
		</ItemGroup>

		<GetUnoAssetPath_v0
			ProjectDirectory="$(MSBuildProjectDirectory)"
			ItemMetadata="$(_UnoAssetItemMetadata)"
			Input="@(UnoAsset)">
			<Output ItemName="AndroidAsset"          TaskParameter="Output" Condition="'$(_ResizetizerIsAndroidApp)' == 'True'" />
			<Output ItemName="Content"               TaskParameter="Output" Condition="'$(_ResizetizerIsiOSApp)' == 'True'" />
			<Output ItemName="ContentWithTargetPath" TaskParameter="Output" Condition="'$(_ResizetizerIsUWPApp)' == 'True' Or '$(_ResizetizerIsWindowsAppSdk)' == 'True'" />
		</GetUnoAssetPath_v0>
	</Target>

	<Target Name="ProcessUnoSplashScreens_v0"
				Condition="'@(UnoSplashScreen)' != '' And '$(DesignTimeBuild)' != 'true'">

		<Warning
			Condition="'@(UnoSplashScreen->Count())' &gt; '1'"
			Text="More than one 'UnoSplashScreen' is defined; only the first will be used."
		/>

		<Error
			Condition="'@(UnoSplashScreen)' == '@(UnoIcon)'"
			Text= "The value of UnoSplashScreen and UnoIcon cannot be the same." />

		<Error
			Condition="'@(UnoSplashScreen)' == '%(UnoIcon.ForegroundFile)'"
			Text= "The value of UnoSplashScreen and UnoIcon cannot be the same." />

		<Warning Condition="'%(UnoSplashScreen.Link)' != ''"
				 Text ="The UnoSplashScreen.Link property will be ignored." />

		<!--If not Windows-->
		<ItemGroup Condition="$(_ResizetizerIsWasmApp) == 'True' Or $(_ResizetizerIsSkiaApp) == 'True' or '$(_ResizetizerIsAndroidApp)' == 'True' or ('$(_ResizetizerIsiOSApp)' == 'True' and '$(TargetPlatformIdentifier)' != 'maccatalyst')">
			<UnoImage Include="@(UnoSplashScreen)" IsSplashScreen="True" Link=""/>
		</ItemGroup>

		<!--Wasm-->

		<GenerateWasmSplashAssets_v0
			Condition="$(_ResizetizerIsWasmApp) == 'True'"
			IntermediateOutputPath="$(_UnoIntermediateSplashScreen)"
			EmbeddedResources="@(EmbeddedResource)"
			UnoSplashScreen="@(UnoSplashScreen)"
			OutputFile="$(_UnoIntermediateAppManifestWasm)">

			<Output PropertyName="UserAppManifest"
					TaskParameter="UserAppManifest" />

		</GenerateWasmSplashAssets_v0>

		<ItemGroup Condition="$(_ResizetizerIsWasmApp) == 'True' And $(UserAppManifest) != ''">
			<EmbeddedResource Remove="$(UserAppManifest)" />
			<EmbeddedResource Include="$(_UnoIntermediateAppManifestWasm)"
								Link="$(UserAppManifest)"/>
		</ItemGroup>

		<!-- Android -->
		<GenerateSplashAndroidResources_v0
			Condition="'$(_ResizetizerIsAndroidApp)' == 'True'"
			IntermediateOutputPath="$(_UnoIntermediateSplashScreen)"
			UnoSplashScreen="@(UnoSplashScreen)"
		/>
		<ItemGroup Condition="'$(_ResizetizerIsAndroidApp)' == 'True'">
			<LibraryResourceDirectories Condition="Exists('$(_UnoIntermediateSplashScreen)')" Include="$(_UnoIntermediateSplashScreen)">
				<StampFile>$(_ResizetizerStampFile)</StampFile>
			</LibraryResourceDirectories>
			<FileWrites Include="$(_UnoIntermediateSplashScreen)**\*" />
		</ItemGroup>

		<!-- iOS, but not Catalyst -->
		<GenerateSplashStoryboard_v0
			Condition="'$(_ResizetizerIsiOSApp)' == 'True' and '$(TargetPlatformIdentifier)' != 'maccatalyst'"
			OutputFile="$(_UnoIntermediateStoryboard)"
			UnoSplashScreen="@(UnoSplashScreen)"
		/>
		<PropertyGroup Condition="'$(_ResizetizerIsiOSApp)' == 'True' and '$(TargetPlatformIdentifier)' != 'maccatalyst'">
			<_UnoIntermediateSplashScreenFile>$(_UnoIntermediateStoryboard)</_UnoIntermediateSplashScreenFile>
		</PropertyGroup>
		<ItemGroup Condition="'$(_ResizetizerIsiOSApp)' == 'True' and '$(TargetPlatformIdentifier)' != 'maccatalyst'">
			<InterfaceDefinition Include="$(_UnoIntermediateStoryboard)" Link="$([System.IO.Path]::GetFileName($(_UnoIntermediateStoryboard)))" />
			<FileWrites Include="$(_UnoIntermediateStoryboard)" />
		</ItemGroup>

		<!-- Create a partial info.plist for iOS -->
		<CreatePartialInfoPlistTask_v0
			Condition="'$(_ResizetizerIsiOSApp)' == 'True' And '$(_UnoIntermediateSplashScreenFile)' != ''"
			IntermediateOutputPath="$(_UnoIntermediateSplashScreen)"
			PlistName="UnoInfo.plist"
			Storyboard="$(_UnoIntermediateSplashScreenFile)" />

		<ItemGroup Condition="'$(_ResizetizerIsiOSApp)' == 'True' ">
			<_UnoSplashPListFiles Include="$(_UnoIntermediateSplashScreen)UnoInfo.plist" Condition="Exists('$(_UnoIntermediateSplashScreen)UnoInfo.plist')" />
			<PartialAppManifest Include="@(_UnoSplashPListFiles)" Condition="'@(_UnoSplashPListFiles)' != ''" />
			<FileWrites Include="@(_UnoSplashPListFiles)" Condition="'@(_UnoSplashPListFiles)' != ''" />
		</ItemGroup>

		<ItemGroup Condition="'$(BuildSessionId)' != '' And '$(_ResizetizerIsiOSApp)' == 'True' And '$(IsMacEnabled)'=='true'">
			<_UnoAssetsToCopyToBuildServer Include="@(_UnoSplashPListFiles)">
				<TargetPath>%(Identity)</TargetPath>
			</_UnoAssetsToCopyToBuildServer>
		</ItemGroup>
		<CopyFilesToBuildServer
			Condition="'$(BuildSessionId)' != '' And '$(_ResizetizerIsiOSApp)' == 'True' And '$(IsMacEnabled)'=='true'"
			SessionId="$(BuildSessionId)"
			Files="@(_UnoAssetsToCopyToBuildServer)" />

		<!-- UWP / WinUI -->
		<ItemGroup Condition="'$(_ResizetizerIsUWPApp)' == 'True' Or '$(_ResizetizerIsWindowsAppSdk)' == 'True'">
			<UnoWindowsSplash Include="@(UnoSplashScreen)" Link=""/>
		</ItemGroup>
		<GenerateSplashAssets_v0
			Condition="'$(_ResizetizerIsUWPApp)' == 'True' Or '$(_ResizetizerIsWindowsAppSdk)' == 'True'"
			IntermediateOutputPath="$(_UnoIntermediateSplashScreen)"
			UnoSplashScreen="@(UnoWindowsSplash)"
		/>
		<ItemGroup Condition="'$(_ResizetizerIsUWPApp)' == 'True' Or '$(_ResizetizerIsWindowsAppSdk)' == 'True' Or '$(_ResizetizerIsSkiaApp)' == 'True'">
			<_UnoSplashAssets Include="$(_UnoIntermediateSplashScreen)**\*" />
			<ContentWithTargetPath Include="@(_UnoSplashAssets)">
				<TargetPath>%(_UnoSplashAssets.Filename)%(_UnoSplashAssets.Extension)</TargetPath>
			</ContentWithTargetPath>
			<FileWrites Include="@(_UnoSplashAssets)" />
		</ItemGroup>

		<MakeDir Directories="$(IntermediateOutputPath)"/>
		<!-- Stamp file for Outputs -->
		<Touch Files="$(_UnoSplashStampFile)" AlwaysCreate="True" />
		<ItemGroup>
			<FileWrites Include="$(_UnoSplashStampFile)" />
		</ItemGroup>
	</Target>

<<<<<<< HEAD
	<Target Name="ResizetizeImages_v0"
		Inputs="$(MSBuildThisFileFullPath);$(_UnoResizetizerTaskAssemblyName);$(_ResizetizerInputsFile);@(UnoImage)"
		Outputs="$(_ResizetizerStampFile)"
		AfterTargets="$(ResizetizeAfterTargets)"
=======
	<Target Name="UnoResizetizeImages_v0"
		Inputs="$(MSBuildThisFileFullPath);$(_UnoResizetizerTaskAssemblyName);$(_UnoResizetizerInputsFile);@(UnoImage)"
		Outputs="$(_UnoResizetizerStampFile)"
		AfterTargets="$(UnoResizetizeAfterTargets)"
>>>>>>> 47b9035 (fix: normalize with Uno prefix and _v0 on task names)
		Condition="'$(DesignTimeBuild)' != 'true'"
		BeforeTargets="$(ResizetizeBeforeTargets)"
		DependsOnTargets="$(ResizetizeDependsOnTargets)">

		<DetectInvalidResourceOutputFilenamesTask_v0
			Items="@(UnoImage->Distinct())"
			ErrorMessage="$(_ResizetizerDefaultInvalidFilenamesErrorMessage)">
		</DetectInvalidResourceOutputFilenamesTask_v0>

		<!-- Resize the images -->
		<ResizetizeImages_v0
			PlatformType="$(ResizetizerPlatformType)"
			IntermediateOutputPath="$(_UnoIntermediateImages)"
			IntermediateOutputIconPath="$(_UnoIntermediateAppIcon)"
			PWAManifestPath="$(_WasmPwaManifestPath)"
			InputsFile="$(_ResizetizerInputsFile)"
			Images="@(UnoImage->Distinct())">

			<Output PropertyName="AppIconPath"
					TaskParameter="GeneratedIconPath" />
			<Output PropertyName="AndroidIcons"
					TaskParameter="AndroidAppIcons"/>
			<Output PropertyName="ResizetizerPwaManifest"
					TaskParameter="PwaGeneratedManifestPath"/>
		</ResizetizeImages_v0>

		<ItemGroup>
			<!-- Get Images that were generated -->
			<!-- Either from the task, or if the task was skipped (up to date), use the wildcard lookup -->
			<_ResizetizerCollectedImages Condition="'@(CopiedResources)' != ''" Include="@(CopiedResources)" />
			<_ResizetizerCollectedImages Condition="'@(CopiedResources)' == ''" Include="$(_UnoIntermediateImages)**\*"/>
			<_ResizetizerCollectedAppIcons Include="$(_UnoIntermediateAppIcon)**\*"/>
			
			<!-- If the PWA manifest is empty we can try to find it on the disk -->
			<_ResizetizerPwaManifestItemGroup Condition="'$(ResizetizerPwaManifest)' ==''" Include="$(_UnoIntermediateAppIcon)**\*.json"/>
			<!-- If the AppIcon property is empty we can try to find it on the disk -->
			<_AppIconItemGroup Condition="'$(AppIconPath)' == ''" Include="$(_ResizetizerIntermediateOutputRoot)**\*.ico"/>
		</ItemGroup>

		<PropertyGroup>
			<!-- If the PWA manifest is empty we can try to find it on the disk -->
			<ResizetizerPwaManifest Condition="'$(ResizetizerPwaManifest)' ==''">%(_ResizetizerPwaManifestItemGroup.FullPath)</ResizetizerPwaManifest>
			<!-- If the AppIcon property is empty we can try to find it on the disk -->
			<AppIconPath Condition="'$(AppIconPath)' == ''">%(_AppIconItemGroup.Identity)</AppIconPath>
		</PropertyGroup>


		<ItemGroup Condition="'$(_ResizetizerIsWasmApp)' != 'True'">
			<Content Include="@(_ResizetizerCollectedImages)"
					 Link="%(_ResizetizerCollectedImages.RecursiveDir)%(_ResizetizerCollectedImages.Filename)%(_ResizetizerCollectedImages.Extension)"
					 TargetPath="%(_ResizetizerCollectedImages.RecursiveDir)%(_ResizetizerCollectedImages.Filename)%(_ResizetizerCollectedImages.Extension)">
			</Content>

			<FileWrites Include="@(_ResizetizerCollectedImages)" />
		</ItemGroup>

		<!--
		Disables "XA0101 build action is not supported" as Uno handles Content items explicitly
		https://github.com/xamarin/xamarin-android/blob/311b41e864a0162895d079477cb9398fbec5ca6e/src/Xamarin.Android.Build.Tasks/Xamarin.Android.Common.targets#L833
		-->
		<ItemGroup Condition="'$(MonoAndroidAssetsPrefix)'!=''">
			<Content Update="@(_ResizetizerCollectedImages)" ExcludeFromContentCheck="true" />
		</ItemGroup>

		<!-- Wasm -->
		<ItemGroup Condition="'$(_ResizetizerIsWasmApp)' == 'True'">
			<Content Include="@(_ResizetizerCollectedImages->FullPath())"
					 Link="%(_ResizetizerCollectedImages.RecursiveDir)%(_ResizetizerCollectedImages.Filename)%(_ResizetizerCollectedImages.Extension)" >
			</Content>

			<Content Include="@(_ResizetizerCollectedAppIcons->FullPath())"
					 Condition="'%(Extension)' != '.ico'"
					 Link="%(_ResizetizerCollectedAppIcons.RecursiveDir)%(_ResizetizerCollectedAppIcons.Filename)%(_ResizetizerCollectedAppIcons.Extension)"/>

			<Content Include="@(_ResizetizerCollectedAppIcons->FullPath())"
					 Condition="'%(Extension)' == '.ico'"
					 UnoDeploy="Root"
					 Link="%(_ResizetizerCollectedAppIcons.RecursiveDir)%(_ResizetizerCollectedAppIcons.Filename)%(_ResizetizerCollectedAppIcons.Extension)"/>

			<FileWrites Include="@(_ResizetizerCollectedImages)" />
		</ItemGroup>

		<ItemGroup Condition="'$(_ResizetizerIsWasmApp)' == 'True' And '$(ResizetizerPwaManifest)' != ''">
			<Content Remove="$(WasmPWAManifestFile)" />
			<Content Include="$(ResizetizerPwaManifest)"
					 CopyToOutputDirectory="PreserveNewest"
					 ExcludeFromSingleFile ="True"
					 CopyToPublishDirectory ="PreserveNewest"
					 Link="$(WasmPWAManifestFile)" />
		</ItemGroup>

		<!-- Android -->
		<ItemGroup Condition="'$(_ResizetizerIsAndroidApp)' == 'True'">
			<AndroidResource Include="@(_ResizetizerCollectedAppIcons)"
					 Link="%(_ResizetizerCollectedAppIcons.RecursiveDir)%(_ResizetizerCollectedAppIcons.Filename)%(_ResizetizerCollectedAppIcons.Extension)" >
			</AndroidResource>
		</ItemGroup>


		<ItemGroup Condition="'$(_ResizetizerIsiOSApp)' == 'True'">
			<_ResizetizerCollectedBundleResourceImages Include="@(_ResizetizerCollectedImages->'%(FullPath)')">
				<LogicalName>%(_ResizetizerCollectedImages.Filename)%(_ResizetizerCollectedImages.Extension)</LogicalName>
				<TargetPath>%(_ResizetizerCollectedImages.Filename)%(_ResizetizerCollectedImages.Extension)</TargetPath>
			</_ResizetizerCollectedBundleResourceImages>

			<ImageAsset
				Include="@(_ResizetizerCollectedBundleResourceImages)"
				Condition="'@(_ResizetizerCollectedBundleResourceImages->Contains('Assets.xcassets'))' == 'True' and '%(_ResizetizerCollectedBundleResourceImages.Identity)' != ''">
				<LogicalName>Assets.xcassets\$([System.IO.Path]::GetFileName($([System.IO.Path]::GetDirectoryName(%(_ResizetizerCollectedBundleResourceImages.Identity)))))\%(_ResizetizerCollectedBundleResourceImages.Filename)%(_ResizetizerCollectedBundleResourceImages.Extension)</LogicalName>
				<TargetPath>Assets.xcassets\$([System.IO.Path]::GetFileName($([System.IO.Path]::GetDirectoryName(%(_ResizetizerCollectedBundleResourceImages.Identity)))))\%(_ResizetizerCollectedBundleResourceImages.Filename)%(_ResizetizerCollectedBundleResourceImages.Extension)</TargetPath>
				<Link>Assets.xcassets\$([System.IO.Path]::GetFileName($([System.IO.Path]::GetDirectoryName(%(_ResizetizerCollectedBundleResourceImages.Identity)))))\%(_ResizetizerCollectedBundleResourceImages.Filename)%(_ResizetizerCollectedBundleResourceImages.Extension)</Link>
			</ImageAsset>
		</ItemGroup>

		<!-- iOS Only -->
		<!-- If on Windows, using build host, copy the files over to build server host too -->
		<ItemGroup Condition="'$(BuildSessionId)' != '' And '$(_ResizetizerIsiOSApp)' == 'True' And '$(IsMacEnabled)'=='true'">
			<_UnoImagesToCopyToBuildServer Include="@(_ResizetizerCollectedBundleResourceImages)">
				<TargetPath>%(Identity)</TargetPath>
			</_UnoImagesToCopyToBuildServer>
		</ItemGroup>
		<CopyFilesToBuildServer
			Condition="'$(BuildSessionId)' != '' And '$(_ResizetizerIsiOSApp)' == 'True' And '$(IsMacEnabled)'=='true'"
			SessionId="$(BuildSessionId)"
			Files="@(_UnoImagesToCopyToBuildServer)" />

		<PropertyGroup>
			<ApplicationIcon Condition="'$(ApplicationIcon)' == ''">$(AppIconPath)</ApplicationIcon>
		</PropertyGroup>

		<MakeDir Directories="$(IntermediateOutputPath)"/>
		<!-- Touch/create our stamp file for outputs -->
		<Touch Files="$(_ResizetizerStampFile)" AlwaysCreate="True" />

		<!-- Include our images and stamp file as filewrites so they don't get rm'd -->
		<ItemGroup>
			<FileWrites Include="$(_ResizetizerStampFile)" />
		</ItemGroup>
	</Target>

	<!-- This is required because the "CalculateAppxGenerateProjectPriEnabled" target explicitly depends
		 on "_ValidatePresenceOfAppxManifestItems" and we need to get in before then. -->
	<Target Name="_ValidatePresenceOfAppxManifestItemsBeforeTarget_v0"
			BeforeTargets="_ValidatePresenceOfAppxManifestItems"
<<<<<<< HEAD
			DependsOnTargets="UnoGeneratePackageAppxManifest"
			Condition="'$(_ResizetizerIsUWPApp)' == 'True' Or '$(_ResizetizerIsWindowsAppSdk)' == 'True' Or '$(_ResizetizerIsSkiaApp)' == 'True'" />

	<Target Name="UnoGeneratePackageAppxManifest"
			Condition="('$(_ResizetizerIsUWPApp)' == 'True' Or '$(_ResizetizerIsWindowsAppSdk)' == 'True' Or '$(_ResizetizerIsSkiaApp)' == 'True') And ('@(AppxManifest)@(_UnoAppxManifest)' !='' Or @(_SkiaManifest) != '')"
=======
			DependsOnTargets="UnoGeneratePackageAppxManifest_v0"
			Condition="'$(_UnoResizetizerIsUWPApp)' == 'True' Or '$(_UnoResizetizerIsWindowsAppSdk)' == 'True' Or '$(_UnoResizetizerIsSkiaApp)' == 'True'" />

	<Target Name="UnoGeneratePackageAppxManifest_v0"
			Condition="('$(_UnoResizetizerIsUWPApp)' == 'True' Or '$(_UnoResizetizerIsWindowsAppSdk)' == 'True' Or '$(_UnoResizetizerIsSkiaApp)' == 'True') And ('@(AppxManifest)@(_UnoAppxManifest)' !='' Or @(_SkiaManifest) != '')"
>>>>>>> 47b9035 (fix: normalize with Uno prefix and _v0 on task names)
			DependsOnTargets="$(UnoGeneratePackageAppxManifestDependsOnTargets)"
			BeforeTargets="$(UnoGeneratePackageAppxManifestBeforeTargets)"
			Inputs="$(MSBuildThisFileFullPath);$(_UnoResizetizerTaskAssemblyName);$(_ResizetizerInputsFile);$(_UnoSplashInputsFile);@(AppxManifest);@(_UnoAppxManifest)"
			Outputs="$(_UnoManifestStampFile);$(_UnoIntermediateManifest)Package.appxmanifest">


		<PropertyGroup>
			<_MauiWindowsApplicationId Condition="'$(_MauiWindowsApplicationId)' == '' and '$(ApplicationIdGuid)' != ''">$(ApplicationIdGuid)</_MauiWindowsApplicationId>
			<_MauiWindowsApplicationId Condition="'$(_MauiWindowsApplicationId)' == '' and '$(ApplicationId)' != ''">$(ApplicationId)</_MauiWindowsApplicationId>
		</PropertyGroup>

		<GeneratePackageAppxManifest_v0
			IntermediateOutputPath="$(_UnoIntermediateManifest)"
			AppxManifest="@(AppxManifest);@(_UnoAppxManifest);@(_SkiaManifest)"
			GeneratedFilename="Package.appxmanifest"
			ApplicationId="$(_MauiWindowsApplicationId)"
			ApplicationDisplayVersion="$(ApplicationDisplayVersion)"
			ApplicationVersion="$(ApplicationVersion)"
			ApplicationTitle="$(ApplicationTitle)"
			AppIcon="@(UnoImage->WithMetadataValue('IsAppIcon', 'true'))"
			SplashScreen="@(UnoSplashScreen)" />

		<!-- replace user manifest -->
		<ItemGroup Condition="'@(AppxManifest)' != ''">
			<AppxManifest Remove="@(AppxManifest)" />
			<AppxManifest Include="$(_UnoIntermediateManifest)Package.appxmanifest" />
		</ItemGroup>
		<ItemGroup Condition="'@(_SkiaManifest)' != '' ">
			<AppxManifest Remove="@(AppxManifest)" />
			<AppxManifest Include="$(_UnoIntermediateManifest)Package.appxmanifest" />
			
			<!--If there's no LogicalName, we use the default name-->
			<EmbeddedResource Include="$(_UnoIntermediateManifest)Package.appxmanifest"
								Link="%(_SkiaManifest.Link)"
								LogicalName="Package.appxmanifest"
								Condition="%(_SkiaManifest.LogicalName) == '' "/>

			<EmbeddedResource Include="$(_UnoIntermediateManifest)Package.appxmanifest"
								Link="%(_SkiaManifest.Link)"
								LogicalName="%(_SkiaManifest.LogicalName)"
								Condition="%(_SkiaManifest.LogicalName) != '' "/>

		</ItemGroup>
		<ItemGroup Condition="'@(_UnoAppxManifest)' != ''">
			<_UnoAppxManifest Remove="@(_UnoAppxManifest)" />
			<_UnoAppxManifest Include="$(_UnoIntermediateManifest)Package.appxmanifest" />
		</ItemGroup>

		<MakeDir Directories="$(IntermediateOutputPath)"/>
		<!-- Stamp file for Outputs -->
		<Touch Files="$(_UnoManifestStampFile)" AlwaysCreate="True" />
		<ItemGroup>
			<FileWrites Include="$(_UnoManifestStampFile)" />
		</ItemGroup>

	</Target>

<<<<<<< HEAD
	<Target Name="_CleanResizetizer">
		<RemoveDir Directories="$(_ResizetizerIntermediateOutputRoot)" Condition="Exists ('$(_ResizetizerIntermediateOutputRoot)' )" />
=======
	<Target Name="_CleanUnoResizetizer_v0">
		<RemoveDir Directories="$(_UnoResizetizerIntermediateOutputRoot)" Condition="Exists ('$(_UnoResizetizerIntermediateOutputRoot)' )" />
>>>>>>> 47b9035 (fix: normalize with Uno prefix and _v0 on task names)
	</Target>

	<Target Name="_GenerateWindowUnoIconExtension"
			Condition="'$(_ResizetizerIsCompatibleApp)' == 'True'"
			BeforeTargets="Build;CoreCompile;XamlPreCompile"
			Inputs="@(UnoIcon)"
			Outputs="@(_WindowIconExtension)">
		<WindowIconGeneratorTask_v0
			IntermediateOutputDirectory="$(_ResizetizerIntermediateOutputRoot)"
			UnoIcons="@(UnoIcon)">
			<Output ItemName="GeneratedFile"
				TaskParameter="GeneratedClass"/>
			<Output ItemName="FilesWrite"
				TaskParameter="GeneratedClass"/>
		</WindowIconGeneratorTask_v0>
	</Target>

	<Target Name="_AddResizetizerWindowIconExtensions"
			Condition="'$(_ResizetizerIsCompatibleApp)' == 'True'"
			AfterTargets="_GenerateWindowUnoIconExtension"
			BeforeTargets="Build;CoreCompile;XamlPreCompile">
		<ItemGroup Condition="Exists('@(_WindowIconExtension->FullPath())')">
			<Compile Include="@(_WindowIconExtension)" />
		</ItemGroup>
	</Target>

</Project>
